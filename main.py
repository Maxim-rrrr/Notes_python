# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from DataBase.main import database
from loguru import logger
from modules.setInterval import setInterval


class Ui_MainWindow(object):
    def __init__(self):
        # Основные свойства приложения

        # Номерные типы сущносте выведенные в константы
        self.NOTEBOOK = 0
        self.NOTE = 1

        # Список всех блокнотов пользователя
        self.notebooks = []

        # Открытый блокнот
        self.notebook = None

        # Список всех заметок открытого блокнота
        self.notes = []

        # Открытая заметка
        self.note = None

        # Объек с изменениями заметок, которые ещё не сохранены
        self.change_notes = {}

        # Выбранный элемент
        self.select_item = {}

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 800)
        MainWindow.setStyleSheet("background-color: rgb(38, 38, 38);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setStyleSheet("")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.add_note_btn = QtWidgets.QPushButton(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.add_note_btn.sizePolicy().hasHeightForWidth())
        self.add_note_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.add_note_btn.setFont(font)
        self.add_note_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.add_note_btn.setStyleSheet("border: 1px solid rgb(217, 217, 217);\n"
                                        "border-radius: 10px;\n"
                                        "color: rgb(217, 217, 217);\n"
                                        "padding: 2px;")
        self.add_note_btn.setObjectName("add_note_btn")
        self.gridLayout_3.addWidget(self.add_note_btn, 1, 1, 1, 1)
        self.list_note = QtWidgets.QListWidget(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.list_note.setFont(font)
        self.list_note.setStyleSheet("color: rgb(217, 217, 217);\n"
                                     "padding: 5px;\n"
                                     "border: none;\n"
                                     "border-left: 2px solid rgb(217,217,217);")
        self.list_note.setResizeMode(QtWidgets.QListView.Fixed)
        self.list_note.setObjectName("list_note")
        self.gridLayout_3.addWidget(self.list_note, 3, 0, 1, 2)
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(217, 217, 217);")
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 0, 0, 1, 2)
        self.label_note_count = QtWidgets.QLabel(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(3)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_note_count.sizePolicy().hasHeightForWidth())
        self.label_note_count.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_note_count.setFont(font)
        self.label_note_count.setStyleSheet("color: rgb(217, 217, 217);")
        self.label_note_count.setObjectName("label_note_count")
        self.gridLayout_3.addWidget(self.label_note_count, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.frame_2, 0, 1, 1, 1)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setStyleSheet("")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(217, 217, 217);")
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 2)
        self.label_notebook_count = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(3)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_notebook_count.sizePolicy().hasHeightForWidth())
        self.label_notebook_count.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_notebook_count.setFont(font)
        self.label_notebook_count.setStyleSheet("color: rgb(217, 217, 217);")
        self.label_notebook_count.setObjectName("label_notebook_count")
        self.gridLayout_2.addWidget(self.label_notebook_count, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 1, 1, 1)
        self.add_notebook_btn = QtWidgets.QPushButton(self.frame)
        sizePolicy.setHeightForWidth(self.add_notebook_btn.sizePolicy().hasHeightForWidth())
        self.add_notebook_btn.setSizePolicy(sizePolicy)
        self.add_notebook_btn.setFont(font)
        self.add_notebook_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.add_notebook_btn.setStyleSheet("border: 1px solid rgb(217, 217, 217);\n"
                                            "border-radius: 10px;\n"
                                            "color: rgb(217, 217, 217);\n"
                                            "padding: 2px;")
        self.add_notebook_btn.setObjectName("add_notebook_btn")
        self.gridLayout_2.addWidget(self.add_notebook_btn, 1, 1, 1, 1)
        self.list_notebook = QtWidgets.QListWidget(self.frame)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.list_notebook.setFont(font)
        self.list_notebook.setStyleSheet("color: rgb(217, 217, 217);\n"
                                         "border: none;\n"
                                         "padding: 5px;\n"
                                         "border-left: 2px solid rgb(217,217,217);")
        self.list_notebook.setResizeMode(QtWidgets.QListView.Fixed)
        self.list_notebook.setObjectName("list_notebook")
        self.gridLayout_2.addWidget(self.list_notebook, 3, 0, 1, 2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(6)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setToolTipDuration(-1)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setLineWidth(3)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_title_notebook = QtWidgets.QLineEdit(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_title_notebook.sizePolicy().hasHeightForWidth())
        self.label_title_notebook.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_title_notebook.setFont(font)
        self.label_title_notebook.setStyleSheet("border: 0 solid black;\n"
                                            "\n"
                                            "padding: 5px;\n"
                                            "color: rgb(217, 217, 217);\n"
                                            "")
        self.label_title_notebook.setObjectName("label_title_notebook")
        self.horizontalLayout.addWidget(self.label_title_notebook)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(0)
        self.del_note = QtWidgets.QPushButton(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.del_note.sizePolicy().hasHeightForWidth())
        self.del_note.setSizePolicy(sizePolicy)
        self.del_note.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.del_note.setStyleSheet("border: none;\n"
                                    "background-color: rgb(255, 51, 61);\n"
                                    "border-radius: 10px;\n"
                                    "padding: 10px;")
        self.del_note.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../notes_ui/trash.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.del_note.setIcon(icon)
        self.del_note.setObjectName("del_note")
        self.horizontalLayout.addWidget(self.del_note)
        self.verticalLayout.addWidget(self.frame_4)
        self.title_note_input = QtWidgets.QLineEdit(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_note_input.sizePolicy().hasHeightForWidth())
        self.title_note_input.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.title_note_input.setFont(font)
        self.title_note_input.setStyleSheet("border: 0 solid black;\n"
                                            "\n"
                                            "padding: 5px;\n"
                                            "color: rgb(217, 217, 217);\n"
                                            "")
        self.title_note_input.setObjectName("title_note_input")
        self.verticalLayout.addWidget(self.title_note_input)
        self.text_note_textarea = QtWidgets.QTextEdit(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_note_textarea.setFont(font)
        self.text_note_textarea.setStyleSheet("color: rgb(217, 217, 217);")
        self.text_note_textarea.setObjectName("text_note_textarea")
        self.verticalLayout.addWidget(self.text_note_textarea)
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.last_save_time = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.last_save_time.setFont(font)
        self.last_save_time.setStyleSheet("color: rgb(217, 217, 217);")
        self.last_save_time.setObjectName("last_save_time")
        self.horizontalLayout_2.addWidget(self.last_save_time)
        self.save_indicator = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_indicator.setFont(font)
        self.save_indicator.setStyleSheet("color: rgb(217, 217, 217);")
        self.save_indicator.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.save_indicator.setObjectName("ave_indicator")
        self.horizontalLayout_2.addWidget(self.save_indicator)
        self.verticalLayout.addWidget(self.frame_5)
        self.line = QtWidgets.QFrame(self.frame_3)
        self.line.setGeometry(QtCore.QRect(-70, 50, 160, 3))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.frame_3, 0, 3, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.add_note_btn.setText(_translate("MainWindow", "+"))
        self.add_notebook_btn.setText(_translate("MainWindow", "+"))
        __sortingEnabled = self.list_note.isSortingEnabled()
        self.list_note.setSortingEnabled(False)
        self.list_note.setSortingEnabled(__sortingEnabled)
        self.label_2.setText(_translate("MainWindow", "Заметки"))
        self.label.setText(_translate("MainWindow", "Блокноты"))
        __sortingEnabled = self.list_notebook.isSortingEnabled()
        self.list_notebook.setSortingEnabled(False)
        self.list_notebook.setSortingEnabled(__sortingEnabled)
        self.text_note_textarea.setHtml(_translate("MainWindow",
                                                   "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                                   "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                                   "p, li { white-space: pre-wrap; }\n"
                                                   "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
                                                   "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8.25pt;\"><!--Текст заметки--!></span></p></body></html>"))
        self.save_indicator.setText(_translate("MainWindow", "Все изменения сохранены"))
        self.get_notebooks()
        self.add_listeners()
        self.add_timers()

    # Метод для запроса всех блокнотов пользователя
    def get_notebooks(self):
        # Помещаем весь набор в глобальную переменную, чтоб лишний раз не тянуться в БД
        self.notebooks = database.get_notebooks()

        # Выводим список в соответствующий список
        self.list_notebook.clear()
        for item in self.notebooks:
            self.list_notebook.addItem(item['title'])

        # Обновляем label с кол-во блокнотов
        self.update_count()

    # Метод срабатывает на нажатие на блокнот в списке слева
    def select_notebook(self):
        # Получаем выбранный элемент
        selected_item = self.list_notebook.currentItem()
        index = self.list_notebook.row(selected_item)

        # Выставляем какой блокнот сейчас редактируется
        self.notebook = self.notebooks[index]

        # Выставляем заголовок блокнота в поле ввода
        title = selected_item.text()
        self.label_title_notebook.setText(title)

        # Устанавливаем данный блокнот, как последний выбранный элемент
        self.select_item = {
            'type': self.NOTEBOOK,
            'item': self.notebook
        }

        # Запрашиваем заметки из этого блокнота
        self.get_notes()

    # Метод получения всех заметок из блокнота
    def get_notes(self):
        # Получаем все заметки операясь на открытый блокнот
        self.notes = database.get_note(self.notebook['_id'])

        # Заносим названия заметок в соответствующий список
        self.list_note.clear()
        for item in self.notes:
            if item['title']:
                self.list_note.addItem(item['title'])
            else:
                self.list_note.addItem('Без названия')

        # Обновляем label с кол-во заметок
        self.update_count()

    # Метод срабатывает на нажатие на заметку в списке слева
    def render_note(self):
        # Получаем выбранный элемент
        selected_item = self.list_note.currentItem()
        index = self.list_note.row(selected_item)

        # Выставляем какая заметка сейчас редактируется
        self.note = self.notes[index]

        # Устанавливаем данную заметку, как последний выбранный элемент
        self.select_item = {
            'type': self.NOTE,
            'item': self.note
        }

        # Заполняем поля ввода информацией из заметки
        self.text_note_textarea.setText(self.note['text'])
        self.last_save_time.setText(str(self.note['date']))
        self.title_note_input.setText(self.note['title'])
        self.save_indicator.setText('Все изменения сохранены')

        '''
            А вот это небольшой костыль, дело в том что автосохранение работает по плану, когда происходит изменения 
            заголовка или текста заметка добавляется в self.change_notes для дальнешего сохранения, и
            выставляются значения из заметки первоначально это событие тоже срабатывает и для того чтобы не стучаться 
            в БД лишний раз я удаляю данную заметку из self.change_notes
        '''
        self.change_notes.pop(self.note['_id'], None)

    # Метод срабатывает на изменение заметки
    def change_note(self):
        # Просто добавляем изменения в объект self.change_notes
        self.change_notes[self.note['_id']] = {
            'title': self.title_note_input.text(),
            'text': self.text_note_textarea.toPlainText()
        }

        self.save_indicator.setText('Сохранение...')

    # Метод срабатывает на изменение заголовка блокнота
    def title_notebook_change(self):
        # сразу сохраняю в БД
        if self.notebook:
            title = self.label_title_notebook.text()
            database.set_title_notebooks(self.notebook['_id'], title)
            self.get_notebooks()

    # Метод создания нового блокнота
    def add_notebook(self):
        database.add_notebook()
        self.get_notebooks()

        self.update_count()

    # Метод создания новой заметки
    def add_note(self):
        if self.notebook:
            database.add_note(self.notebook['_id'])
            self.get_notes()

        self.update_count()

    # Метод удаления последнего выбранного элемента
    def del_item(self):
        if self.select_item:
            item = self.select_item.copy()
            self.select_item = None

            if item['type'] == self.NOTEBOOK:
                self.notebook = None

                database.del_notebook(item['item']['_id'])
                self.list_note.clear()
                self.get_notebooks()
            elif item['type'] == self.NOTE:
                self.note = None

                note_id = item['item']['_id']
                database.del_note(note_id)

                self.change_notes.pop(note_id, None)

                self.last_save_time.setText('')
                self.save_indicator.setText('')

                self.get_notes()

        self.update_count()

    # Метод обновления счётчиков заметок и блокнотов
    def update_count(self):
        if self.notebooks:
            self.label_notebook_count.setText(f'{len(self.notebooks)} блокнотов')

        self.label_note_count.setText(f'{len(self.notes)} заметок')

    '''
        Метод сохранения всех изменений
        Метод вызывается через определённый интервал паралельно приложению
        реализацию декоратора можно глянуть в ./modules/setInterval.py
        по самому названию декоратора можно понять, что это адаптация одноимённой функции из JavaScript
        
        Ну, а у кого ещё воровать асинхронные фишки, как не у отрождения асинхронного языка?))
    '''
    @setInterval(0.5)
    def chek_save(self):
        notes = self.change_notes.copy()
        self.change_notes = {}

        if notes:
            for note_id in notes:
                current_note = notes[note_id]
                save_note = database.save_note(note_id, current_note['title'], current_note['text'])

                if self.note and save_note:
                    if self.note['_id'] == save_note['_id']:
                        self.last_save_time.setText(str(save_note['date']))

            self.get_notes()
            self.save_indicator.setText('Все изменения сохранены')

    # Метод задающий слушатели событий
    def add_listeners(self):
        self.list_notebook.clicked.connect(self.select_notebook)
        self.list_note.clicked.connect(self.render_note)
        self.title_note_input.textChanged.connect(self.change_note)
        self.text_note_textarea.textChanged.connect(self.change_note)
        self.add_note_btn.clicked.connect(self.add_note)
        self.add_notebook_btn.clicked.connect(self.add_notebook)
        self.del_note.clicked.connect(self.del_item)
        self.label_title_notebook.textChanged.connect(self.title_notebook_change)

    # Метод запуска функций-таймеров

    def add_timers(self):
        self.chek_save()


if __name__ == "__main__":
    import sys

    # Настойки логера
    logger.add('logs/logs.log', format='{time} {level} {message}', level='DEBUG', rotation='1 MB', compression='zip')

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.show()

    sys.exit(app.exec_())
